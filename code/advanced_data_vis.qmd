---
title: "Advanced Data Visualization"
author: "Sebastian Cox"
date: "June 10 2024"
format:
  html: 
    toc: true # includes a table of contents in rendered html format
execute: # for all code chunks
    warning: false # do not display warnings
    message: false # do not display messages
---

[GitHub Repository](https://github.com/sebastianjcox/advanced_data_vis)

# Part 1. Understand the context

**a) Learn about tidy tuesday**

**b) Dissect someone else's visualization**

[![Benjamin Nowak: Trash Wheel Analysis](images/vis1.jpg)](https://github.com/BjnNowak/TidyTuesday/blob/main/trash_wheel.R)

Benjamin uses the "MoMAColors" and "MetBrewer" packages to add color palates inspired by artwork to his project. These packages have palates based on works from the Museum of Modern Art and the the Metropolitan Museum of Art in New York. He "ggstream" to create his figure, which is a variation of a stacked area chart known as a stream plot, and "patchwork" to easily combine plots. He cleans the data using drop_na to remove rows with missing values and lubridate to modify dates. Afterwards, he converts the number of each type of trash found to its total weight. The data frame contains columns for date, trash wheel, type of trash, weight, and total number of trash objects. He uses geom_stream to generate most of his plot and geom_vline to create vertical lines denoting the years covered in the data. To add the annotation under the "Gwynda Trash Wheel" section of the plot, he uses geom_textbox.

[![Nikos Pechlivanis: National Distribution of Canada's Hockey Players](images/vis2.jpg)](https://github.com/npechl/TidyTuesday/blob/master/R/2024-01-09/2024-01-09_Canadian_Hockey_Player_Birth_Months.R)

Nikos uses the "stringr" package to make working with data in the form of strings easier and "data.table" to improve upon base R's data frame structure. In order to use map visuals in his graph and assign data to geographical regions, he uses "rnaturalearth", "rnaturalearthdata", and "rnaturalearthhires". To prevent overlapping text labels in his plot, he uses "ggrepel". The data are cleaned by grouping players according to birth country and province (for players born in Canada). There are multiple data frames; the first contains data for all NHL players, giving their name, birthday, and place of birth. The second data frame concerns only Canadian players, giving their province of birth instead of country. The bar plot uses geom_col, which makes the heights of bars representative of the values of the underlying data instead of count and geom_text to label the bars. The larger plot uses geom_sf to assign data onto the map of Canada and coord_sf to specify the area that should be shown, as well as geom_text_repel to ensure that text does not overlap.

[![Nicola Rennie: Objects Launched Into Space](images/vis3.jpg)](https://github.com/nrennie/tidytuesday/blob/main/2024/2024-04-23/20240423.R)

Nicola uses "ggimage" to add images to ggplot and "ggforce" to add more plot customization options. She uses a package called "glue" to insert variables into strings ("glue" is a subset of functions from the larger "stringr" package"). To clean her data, she mutates it to assign each year to a specific angle on the circular graph. In addition, she uses pivot_longer and pivot_wider to reformat the data into a tidier, easier-to-read format. The final data frame includes the aggregate number of objects sent into space by all countries by year. She uses geom_circle to create the circular axes that form base of the plot and geom_line to plot the lines extending out from the center. Then, she uses geom_point to add a dot to the end of each line and geom_image to add the picture of the Earth in the center. Finally, she uses geom_text to add the annotations to the circles. This is an essential addition, because the scale of the axes is logarithmic and the data would likely have been misinterpreted without the clarification.

# Part 2. Make your own visualization using your data

**a) Update the observations in your data entry**

**b) Decide on a type of visualization that best fits the data set**

I will use a heatmap since it can give a holistic view of trends in my data collection.

**c) Sketch your visualization on paper**

![](images/vis_sketch.JPG)

**d) Code up your sketch!**

```{r}
#read in packages
library(readxl) # activating package to analyze excel files
library(tidyverse) # activating package to use pipe operator
library(googlesheets4) #read in google sheet data
library(MoMAColors) #for color palates
library(here) #file organization
```

```{r}
#import data
#options(gargle_oauth_email = TRUE)
#oatmeal <- read_sheet("https://docs.google.com/spreadsheets/d/1-jehYNq2uGv3Dk84BBosJTLBaYldt46AJvlJO098-VI/edit?usp=sharing")
oatmeal <- read_csv(here("data","data.csv"))

#clean data
oatmeal_clean <- na.omit(oatmeal) #remove blank values
#order data according to day
day_order <- c("Sun","Mon","Tue","Wed","Thu","Fri","Sat")
oatmeal_clean$day <- factor(oatmeal_clean$day, levels = day_order)

#select variables needed for data visualization
oatmeal_vis <- oatmeal_clean %>% 
  select(time_to_start_min, day, week)
```

```{r}
#data visualization

#set y-axis limits
min_week <- 3 
max_week <- 10
plot <- ggplot(data = oatmeal_vis, #use cleaned data set
               aes(x = day, #day of week on x axis
                   y = week, #week of quarter on y axis
                   fill = time_to_start_min)) + #fill according to time elapsed
  geom_tile(color = "white", size = 0) + #display data as tiles
  #display y-axis from low to high values according to predefined limits
  scale_y_reverse(breaks = min_week:max_week) + 
  #color scheme inspired by Lola Flash's Self-Portrait in the MoMA NYC
  scale_fill_moma_c("Flash") + 
  #label axes
  labs(title = "Time Between Waking Up and Eating Breakfast", 
       y = "Week of Spring Quarter",
       x = "") + #no x-axis label
  theme(panel.grid.minor =element_blank(), #remove gridlines
        panel.grid.major = element_blank(),
        axis.ticks = element_blank(), #remove axis ticks
        legend.position = "none", #remove legend
        #change background colors
          panel.background = element_rect(fill = "blueviolet"),
        plot.background = element_rect(fill = "blueviolet"),
        text = element_text(family = "Courier"), #change font
        #center plot title
        plot.title = element_text(size = 15, hjust = 0.5, color = "white"),
        #change font colors
        axis.title = element_text(size = 12, color = "white"),
        axis.text = element_text(color = "white")) +
  #add annotation
  annotate("text", x = "Fri", y = 4, label = "no data :(", 
           color = "white", size = 2, family = "Courier")

plot #display plot
```

**e) Write about your process**

To begin my visualization, I had to remove empty values from my data spreadsheet and reorganize the data so it was ordered by day. Then, I refined the data frame further by keeping only the variables necessary for visualization. I used geom_tile to display each day as a rectangle that could then be colored according to the time elapsed between waking up and breakfast. I was inspired by Benjamin Novak's use of the MoMAColors package, so I wanted to integrate its colors palates into my final. Initially, I wanted to search for a color palate that was mostly monochromatic so that the chart would be easier to interpret, but I got to learn more about the artwork behind each color set in the process. The visualizations I analyzed used annotate() and geom_textbox() to add annotations to their plot, and I chose annotate() for ease of use. To complement the color palate of the heatmap, I changed the color of the background and then adjusted the font and color of the figure's text to improve its readability. My visualization shows that I tend to take longest to eat my breakfast on Sundays, likely because I usually have no commitments and can spend more time in bed. I take the least amount of time to eat breakfast on Tuesdays and Thursdays. I have a class at 8AM on those days, so I have to rush to get ready after I wake up.
